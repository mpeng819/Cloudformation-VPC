AWSTemplateFormatVersion: 2010-09-09
# This CloudFormation template deploys a VPC, with the following:
# 2 x Public Subnets in 2 AZ
# 2 x Private Subnets in 2 AZ
# 1 x NAT instance in PublicSubnet1
# 1 x NAT instance in PublicSubnet2
# 1 x Public Facing Application Load Balancer
# 1 x ASG
# 2 x EC2 instance in 2 Private Subnet in the ASG, 1 EC2 per Private Subnet
# 1 x S3 Gateway Endpoints, associate Private RT1 and Private RT2

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - VPCCIDR
      - PublicSubnet1CIDR
      - PublicSubnet2CIDR
      - PrivateSubnet1CIDR
      - PrivateSubnet2CIDR
      - KeyPairName


    ParameterLabels:
      VPCCIDR:
        default: VPC CIDR
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR
      PrivateSubnet1CIDR:
        default: Private subnet 1 CIDR
      PrivateSubnet2CIDR:
        default: Private subnet 2 CIDR

Parameters:
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 10.10.0.0/16
    Description: CIDR Block for the VPC
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 10.10.1.0/24
    Description: CIDR Block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 10.10.2.0/24
    Description: CIDR Block for the public DMZ subnet 2 located in Availability Zone 2
    Type: String
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 10.10.11.0/24
    Description: CIDR block for private subnet 1 located in Availability Zone 1
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 10.10.12.0/24
    Description: CIDR block for private subnet 2 located in Availability Zone 2
    Type: String
  KeyPairName:
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be a valid Key Pair


Mappings:
 #  This is the Amazon Linux 2 AMI.  Please check before the deployment
  AmazonLinuxAMI:
    ap-southeast-1:
      AMI: ami-0615132a0f36d24f4    # Singapore
    ap-northeast-1:
      AMI: ami-0a1c2ec61571737db    # Tokyo
    ap-northeast-2:
      AMI: ami-01af223aa7f274198    # Seoul

  # This is mapping for the instance type. Please check before the deployment
  AmazonLinuxAMIInstanceType:
    ap-southeast-1:
      AMIType: t2.micro    # Singapore
    ap-northeast-1:
      AMIType: t2.micro    # Tokyo
    ap-northeast-2:
      AMIType: t2.micro    # Seoul

  # This is the NAT AMI. Please check before the deployment
  AmazonNATAMI:
    ap-southeast-1:
      AMI: ami-0003ce8d47722ef67    # Singapore
    ap-northeast-1:
      AMI: ami-00d29e4cb217ae06b    # Tokyo
    ap-northeast-2:
      AMI: ami-02e99970f2f3c8e60    # Seoul



Resources:
  # Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Sub ${AWS::StackName}

  # Our VPC will need internet access:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-1

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-2

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-1

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-2

  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public-RT

  # Public route table has direct routing to IGW:
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Here are the private route tables:
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private-RT1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private-RT2

  # Private route table can access web via NAT1
  PrivateRoute1:
   Type: AWS::EC2::Route
   Properties:
     RouteTableId: !Ref PrivateRouteTable1
     DestinationCidrBlock: 0.0.0.0/0
     InstanceId: !Ref NATInstance1

  # Private route table can access web via NAT2
  PrivateRoute2:
   Type: AWS::EC2::Route
   Properties:
     RouteTableId: !Ref PrivateRouteTable2
     DestinationCidrBlock: 0.0.0.0/0
     InstanceId: !Ref NATInstance2

# Attach the public subnets to public route tables,
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  # Attach the private subnets to private route tables,

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable2

  # Create NAT Instance1 in public subnet 1
  NATInstance1:
    Type: AWS::EC2::Instance
    DependsOn: PublicRoute1
    Properties:
      ImageId: !FindInMap [ AmazonNATAMI, !Ref "AWS::Region", AMI]
      InstanceType: !FindInMap [ AmazonLinuxAMIInstanceType, !Ref "AWS::Region", AMIType]
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetA
        AssociatePublicIpAddress: true
        GroupSet:
        - !Ref InstanceSecurityGroup
      SourceDestCheck: false
      Tags:
      - Key: Name
        Value: !Sub NAT1-${AWS::StackName}

  # Create NAT Instance2 in public subnet 2
  NATInstance2:
    Type: AWS::EC2::Instance
    DependsOn: PublicRoute1
    Properties:
      ImageId: !FindInMap [ AmazonNATAMI, !Ref "AWS::Region", AMI]
      InstanceType: !FindInMap [ AmazonLinuxAMIInstanceType, !Ref "AWS::Region", AMIType]
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetB
        AssociatePublicIpAddress: true
        GroupSet:
        - !Ref InstanceSecurityGroup
      SourceDestCheck: false
      Tags:
      - Key: Name
        Value: !Sub NAT2-${AWS::StackName}

  # Security Group for the EC2 instance
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: ALBSecurityGroup
    Properties:
      GroupDescription: Enable SSH, HTTP and ICMP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
#          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub EC2-SG-${AWS::StackName}

  # Security Group for the ALB
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP/HTTPS access
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ALB-SG-${AWS::StackName}

  # Target Group for the HTTP
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: '80'
      Protocol: 'HTTP'
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /index.html
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub ALB-TG-${AWS::StackName}

  # Create the ALB
  WebAppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub ALB-${AWS::StackName}
      Type: application

  # Create the ALB listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppALB
      Port: '80'
      Protocol: HTTP

  # ASG Lunch Configuration
  DeployAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref "AWS::Region", AMI]
      InstanceType: !FindInMap [ AmazonLinuxAMIInstanceType, !Ref "AWS::Region", AMIType]
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 8
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            yum update -y
            yum install httpd -y
            service httpd start
            chkconfig httpd on
            cd /var/www/html
            echo "<html><h1>Hello, Welcome To My Webpage Server! </h1></html>" > index.html

  # Auto Scaling Group
  DeployAppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref DeployAppLaunchConfig
      MaxSize: 4
      MinSize: 2
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
      Tags:
          - Key: Name
            Value: !Sub EC2-${AWS::StackName}
            PropagateAtLaunch: True
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: True

  # S3 Gateway Endpoint
  EndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument: '{
        "Statement":[{
            "Effect":"Allow",
            "Principal": "*",
            "Action":["*"],
            "Resource":["*"]
        }]
      }'
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
